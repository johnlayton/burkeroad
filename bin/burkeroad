#!/usr/bin/env node
'use strict';

var child = require( 'child_process' ),
     path = require( 'path' ),
 mustache = require( 'mustache' ),
       fs = require( 'fs' );

var templates = path.join( path.resolve( __dirname ), "..", "templates" );
var output = process.cwd();

var usingModel = function( callback ) {
  var name = path.basename( process.cwd() );
  fs.exists( path.join( process.cwd(), '.git' ), function( exists ) {
    if ( exists ) {
      callback(undefined, { name : name, vcs  : 'Git' } );
    } else {
      callback(undefined, { name : name, vcs  : '' } );
    }
  } );
};

var generate = function ( dir ) {

  usingModel( function( err, model ) {

    fs.readdir( dir, function ( err, files ) {

      files.forEach( function ( file ) {
        var f = path.join( path.resolve( dir ), file );
        var o = path.join( output, path.relative( templates, mustache.render( f, model ) ) );

        fs.stat( f, function ( err, fstat ) {
          if (err ) {

            console.log( err );

          }
          if ( fstat.isDirectory() ) {

            fs.stat( o, function(err, ostat){

              if (ostat && ostat.isDirectory() ) {

                 generate(f);

              } else {
                  fs.mkdir(o, function (err) {
                      if (err) {
                          console.log(err);
                          throw err;
                      } else {
                          generate(f);
                      }
                  });
              }

            });

          } else if ( o.match( /.*\.xml/ ) || o.match( /.*\.iml/ ) || o.match( /\.name/ ) ) {

            fs.readFile( f, function ( err, template ) {
              fs.writeFile( o, mustache.render( template.toString(), model ), function ( err ) {
                if ( err ) {

                  throw err;

                }
              } );
            } );

          } else {
          }
        } );
      } );
    } );
  } );
};

generate( templates );

setTimeout( function() {
  var open = child.spawn( "open", [".", "-a", "Intellij IDEA" ] );
}, 2000 );
