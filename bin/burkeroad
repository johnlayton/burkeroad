#!/usr/bin/env node

'use strict';

var child = require( 'child_process' ),
     path = require( 'path' ),
 mustache = require( 'mustache' ),
       fs = require( 'fs' );

var templates = path.join( path.resolve( __dirname ), "..", "templates" );
//var output = path.join( path.resolve( __dirname ), "..", "output" );
var output = process.cwd();

var usingModel = function( callback ) {
  var name = path.basename( process.cwd() );
  fs.exists( path.join( process.cwd(), '.git' ), function( exists ) {
    if ( exists ) {
      callback(undefined, { name : name, vcs  : 'Git' } );
    } else {
      callback(undefined, { name : name, vcs  : '' } );
    }
  } );
}

var generate = function ( dir ) {
  usingModel( function( err, model ) {

//    console.log( model );

    fs.readdir( dir, function ( err, files ) {
      files.forEach( function ( file ) {
        var f = path.join( path.resolve( dir ), file );
        var o = path.join( output, path.relative( templates, mustache.render( f, model ) ) );

        console.log( "Create File : " + o );

        fs.stat( f, function ( err, stat ) {
          if (err ) {
            console.log( err );
          } if ( stat.isDirectory() ) {
            fs.mkdir( o, function ( err ) {
              if ( err ) {
                throw err;
              } else {
                generate( f );
              }
            } );
          } else if ( o.match( /.*\.xml/ ) || o.match( /.*\.iml/ ) || o.match( /\.name/ ) ) {
            fs.readFile( f, function ( err, template ) {
              fs.writeFile( o, mustache.render( template.toString(), model ), function ( err ) {
                if ( err ) {
                  throw err;
                }
              } );
            } );
          } else {
//            console.log( "What ..." );
          }
        } );
      } );
    } );
  } );
};

//fs.mkdir( output, function( err ) {
//  if ( err ) {
//    console.log( err );
//  } else {
//    generate( templates );
//  }
//} );

generate( templates );

setTimeout( function() {
  //var open = child.spawn( "open", [".idea", "-a", "Intellij IDEA 13" ] );
  var open = child.spawn( "open", [".", "-a", "Intellij IDEA 14" ] );

  //var open =
  //open.stdout.on('data', function (data) {
  //  console.log('stdout: ' + data);
  //});

  //open.stderr.on('data', function (data) {
  //  console.log('stdout: ' + data);
  //});
}, 2000 );
